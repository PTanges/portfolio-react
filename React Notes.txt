== << React Notes >> ==
React allows for JSX to write HTML elements in JS,
and place them in the DOM without createElement or appendChild()

>> React Rules: JSX
JSX converts HTML tags into React elements

    - Example 01 (JSX):
        const element_name = <h1>My name is JSX!</h1>;

    - Example 02 (No JSX):
        const element_name = React.createElement('h1', {}, 'I do not use JSX!');

Multi-line HTML (Large HTML Blocks) can be done within parentheses
The HTML code must be wrapped under ONE top level element,
so multiple paragraphs must be encapsulated within a div
- Be sure to close elements with />

    - Example 04 (Large HTML Block within JSX):
        const element_name = (
            <ul>
                <li>Apple</li>
                <li>Banana</li>
                <li>Cherry</li>
            </ul>
        );

    - Example 05 (Multiple HTML Blocks within JSX):
        const element_name = (
            <div>
                <p>Paragraph 1!</p>
                <p>Paragraph 2!</p>
            </div>
        );

>> React Rules: Expressions
Expressions can be done within the {} similar to Python
    - Example 03 (Expression within JSX):
        const element_name = <h1>{5 + 3} is more than {5 - 3}</h1>;


>> React Rules: Classes in JSX
Since class is a reserved word in JS, you must use className
    - Example 06 (Classes in JSX):
        const element_name = <h1 className="header"> Hello World! </h1>;

>> React Rules: Logical Operators in React
React supports if statements OUTSIDE of JSX.
You may use ternary expressions within the {} such as ?, otherwise not.

>> React Rules: Components
Components are similar to JS functions, working in isolation and return HTML.
- Either class or function component
- Generally recommended to use function component + hooks

    - Example 07 (Class Component in React):
        class Car extends React.Component {
            render() {
                return <h2>The car goes BEEP BEEP!</h2>;
            }
        }

    - Example 08 (Function Component in React):
        function Car() {
            return <h2>The car goes VROOM VROOM!</h2>;
        }

    - Example 09 (Passing Args to F!Component in React):
        root.render(<App colour="red"/>); // Component rendering

Components may be within other components.
Components may be given arguments (props/properties).
    - Example 10 (Nested Components with props):
        function Car(props) {
        return <h2>I am a { props.brand }!</h2>;
        }

        function Garage() {
        return (
            <>
            <h1>Who lives in my garage?</h1>
            <Car brand="Ford" />
            </>
        );
        }

        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(<Garage />);

    - Example 11 (Alternate Example):
        function Car(props) {
            return <h2>I am a { props.brand }!</h2>;
        }

        function Garage() {
            const carName = "Ford";

            return (
                <>
                <h1>Who lives in my garage?</h1>
                <Car brand={ carName } />
                </>
            );
        }

        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(<Garage />);

    - Example 12 (Proper use of props):
        function Person(props) {
            return <h2>My name is { props.firstname }!</h2>;
        }

    - Example 12 (Wrong use of props):
        // will not work. I presume it's because prop is an object and you need to access the properties with the . operator
        function Person(firstname) {
            return <h2>My name is { firstname }!</h2>;
        }

>> React Rules: Syntax cont.
Events use camelCase. Event handlers are in {}
    - Example 13 (Event / Event Handler):
        onClick instead of onclick.
        onClick={shoot}  instead of onclick="shoot()".